C Programming: A Modern Approach: Page 49, November 12, 2020.
{C Book, Page 77, Nov 16: learned about ifs and conditional operators( ||, &&, etc, as well as 
    equality operators(==, !=) }
{C Book, Page ?Chap6Loops  : Conditional expressions were learned, (? and :) ? is "then", and : is else,}
 nov 22{C book page 104, loop learning, do statement, while etc}
NOV25 PG151{learning about long int, short int, etc, basic types(chap 7)
there are new conversion specifiers, for examplescanf("%x") will
read and assign a hexadecimal operator, "%lx" will read a long hexadecimal int, float, double, and long double types fall into the real flaoting types category
floating constants can be written in a variety of ways, some examples of writing 57.0: 57., 57.0e0, 57EO,  5.7e1. a floating constant must contain a decimal point and/or an 
exponent. exponents must be preceded by the letter E. When reading/writing something with double value, scanf("%lf") = long double. Characters are EXTREMELY 
similar to numbers in C. #include <ctype.h> for toupper function, this converts all lower case to their respective upper case characters. Implioit conversions
happen when the compiler automatically converts a value, for exampel, integer plus float, the answer is converted to a float, since it is the least harmful
process. For diagrams on the heiracrchy refer to page 143. Casts control implicit conversions. May need refresher on casting, super useful. Remember implicit
conversions when using casting, you do not need to apply a type to both values at times. You can use typedef to turn any word into a defining term (ie. int, float).
}

{
Chapter 8 Arrays, nov 29, after programming projects (did around 5 with help from github)
arrays must have an initializer. ex. int a[10] = {0,0,0,}
arrays begin at 0, ex. a[10] goes from 0-9
you can use designated initalizers to make specificity easier
ex. int a[15] = {[2] = 29} will set the 2nd value(3rd in actuality) to 29, you may use this
or standard designated, or both in conjunction with one another;
sizeof[a] /sizeof(a[0]) will find the size of array "a"
}
Chapter 9 functions, Dec  7: Functions that are declared as void cannot be called similarly
to functions with a return value, they must be called standalone, ie: function(parameter);
//declare the function type in declaration;
//Functions cannot return arrays;
//return type is void: indicates the the function doesn't return a value;
//parameters+variables declared in function are not global.

Chapter 10 = function elaboration , didnt do the projects.
need to do more work on functions it was just so extremely annoying i
couldnt be bothered. Blocks, temperary variables, scopes, etc.

Chapter11, DEC 12th, finally! pointers!
/***********************************************************
Pointers can only point to their type, for example, int *p, can only
point to integer values.
//will refer to every pointer with an asterisk before it, *p
//you use the & symbol to assign a pointer to an object
//dont need to use an "&" when assigning a value to a pointer (scanf)
//must use "&" when assigning pointers to a function with pointer parameters
// you can pass and return pointers to fucntions
//int *p = &i works, *p = &i does not work
"the * symbol performs indirection when used as a unary operator, it assigns
the address of i to the object that p points to, not to p itself.
//pointers can point to constant variables but cannot change them.

//chapter 12: pointers and arrays:
/************************************************************
//this will be key to mastering c and becoming an efficient programmer
you can only use three forms of pointer arithmatic:
    Adding an integer to a pointer
    Subtracting an integer from a pointer
    Subtracting one pointer from another
//begun learning about pointers as arrays, it is a bit confusing
//maybe watch a youtube video on it.
//watched caleb curry's intro to pointers and indirection operator
//watched Caleb curry's working with pointers video
//watched Caleb curry's passing by value vs pointer 
//dec 15, generally confused about multidimensional array, 
//watched 2 videos on multidimensional arrays and pointers
//in my infinite search for pointer understanding, I may have finally,
struck gold, 
    To begin, p[i] and (p+i) are the same exact thing, just written differently
    when using increments, use this as refer
    if *p = [a,b,c], p==a, ++p = b, this is huge because if you
    were to say *p++ you would simply be adding to the address's value,
    but with p++ you are physically moving the address that it is pointing
    to, this should significantly boost understanding of this concept.
    If confused, reference https://stackoverflow.com/questions/4955198/what-does-dereferencing-a-pointer-mean

Chapter 13-Strings
/*******************************************************************
string.h lib                                                                                                                                                                                                                                                                                                                                                                                                                                                 rary contains built in functions like strcopy, which copies 
strings from array to array, and strncopy, google or go to pages
~~290 to reread about them.
//strlen returns the length of a string 
//strcat, (probably short for concatenation,) adds the content of one string
to the end of another.
//strncat does the same but tests the length to make sure.
//strcomp compares 2 strings and returns a boolean based on which is larger.
ex. if (strcmp(str1,str2) < 0) /*is str1 < str2?*/



iTS like, december 28th. Chapter 15: Writing large programs.
/************************************************************************
Today I begun learning about the use of header files in C
Header files are useful because they can link files together and make 
things easier and more portable and efficient for everyone. I am currently
so drained I am going to stop, i am at the very beginning of line 362.
I am so goddamn tired. Goodnight.
//Headers are used in conjunction with preprocessor stuff.


Chapter 16 /******************************************************
Structures unions and enumerators
//Structures are like arrays, but can have different types in them
//the order of these variables does not matter either!
//structures are cool!
December 29th, Page 381, Start at operations on structures tomorrow.
//structure tags are one way to make structures compatible with one another.
//You can also use typedef, but I think i will stick to tags.
December 30th, stopped at page 387, I am tired and am not reetaining anything 
that I am reading, i am hoping for an efficient tomorrow!
//a popular way of using structures is making an array of structures,
usually with the intent of creating a database of some sort.
//
skipping 3 and 4 tonight, come back to them tomorrow, confused.
Today is january 2nd.
https://www.youtube.com/watch?v=7zXqMD6Fj_E&pbjreload=101
https://www.youtube.com/watch?v=-Vy4qrl675E
January 3rd baby lets pound this out.
I am ending on exercise 7 today, start on exercise 8 tomorrow.
problem 10
//I did 20/21 of the exercises for structures unions and enumerations.
/**************CHAPTER 17 ADVANCED USES OF POINTERS***********************
JAN 09: The BEginning of this chapter